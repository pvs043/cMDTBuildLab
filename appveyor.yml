#---------------------------------#
#      environment configuration  #
#---------------------------------#
version: 3.0.0.{build}
image: WMF 5

#---------------------------------#
#      install configuration      #
#---------------------------------#
install:
    - ps: |
        Write-Host "Install prerequisites" -ForegroundColor Yellow
        $null = Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force -ErrorAction Stop
        #Install-Module -Name PSScriptAnalyzer -Repository PSGallery -Force -ErrorAction Stop
        #Install-Module -Name Pester -Repository PSGallery -Force -ErrorAction Stop
        #Install-Module -Name PSPKI -Repository PSGallery -Force -ErrorAction Stop
        #Install-Module -Name DscResource.AnalyzerRules -Repository PSGallery -Force -ErrorAction Stop
        #Install-Module -Name xDscResourceDesigner -Repository PSGallery -Force -ErrorAction Stop
        #Install-Module -Name DscResource.Test -Repository PSGallery -Force -ErrorAction Stop
        Install-Module -Name xSmbShare -Repository PSGallery -Force -ErrorAction Stop
        Install-Module -Name cNtfsAccessControl -Repository PSGallery -Force -ErrorAction Stop
        # Validate
        #$RequiredModules = 'PSScriptAnalyzer','Pester','xSmbShare','cNtfsAccessControl'
        $RequiredModules = 'xSmbShare','cNtfsAccessControl'
        $InstalledModules = Get-Module -Name $RequiredModules -ListAvailable
        Write-Host "Installed modules:" -ForegroundColor Yellow
        $InstalledModules | ft Name, Version
        if ( ($InstalledModules.count -lt $RequiredModules.Count) -or ($Null -eq $InstalledModules)) {
            throw "Required modules are missing."
        } else {
            Write-Host "All required modules found!" -ForegroundColor Green
        }

#---------------------------------#
#      build configuration        #
#---------------------------------#
build_script:
    - cd ..
    - git clone https://github.com/dsccommunity/DscResource.Test
    - cd .\DscResource.Test
    - ps: |
        Write-Host "Build project" -ForegroundColor Yellow
        Write-Host "Build version : $env:APPVEYOR_BUILD_VERSION"
        Write-Host "Branch        : $env:APPVEYOR_REPO_BRANCH"
        Write-Host "Repo          : $env:APPVEYOR_REPO_NAME"
        Write-Host "Build DscResource.Test..." -ForegroundColor Yellow
        .\build.ps1 -ResolveDependency
        Write-Host "Build cMDTBuildLab..." -ForegroundColor Yellow
        . .\.\cMDTBuildLab\Build.ps1
        #Import-Module .\output\DscResource.Test\0.0.1\DscResource.Test.psm1 -Force -ErrorAction Stop
        Write-Host "...completed!" -ForegroundColor Green
    - #copy .MetaTestOptIn.json ..\Build\cMDTBuildLab
    - #cd ..\Build\cMDTBuildLab
    - #mkdir .git
    - #git clone https://github.com/PowerShell/DscResource.Tests
    - #mkdir "%ProgramFiles%\WindowsPowerShell\Modules\cMDTBuildLab"
    - #copy cMDTBuildLab.psm1 "%ProgramFiles%\WindowsPowerShell\Modules\cMDTBuildLab"
    - #copy cMDTBuildLab.psd1 "%ProgramFiles%\WindowsPowerShell\Modules\cMDTBuildLab"
      #Import-Module -Name .\DscResource.Tests\TestHelper.psm1 -Force -ErrorAction Stop

#---------------------------------#
#      test configuration         #
#---------------------------------#
test_script:
    - ps: |
        Write-Host "Running Test script" -ForegroundColor Yellow
        $testResultsFile = ".\output\TestsResults.xml"
        $res = Invoke-DscResourceTest -Module cMDTBuildLab -Path ..\cMDTBuildLab -OutputFile $testResultsFile -PassThru
        $URI = "https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)"
        $WC  = New-Object 'System.Net.WebClient'
        Write-Host "About to upload file: $(Resolve-Path $testResultsFile)"
        try {
            $WC.UploadFile($URI, (Resolve-Path $testResultsFile))
        } catch {
            Write-Host "Uploading failed!" -ForegroundColor Red
        }

        if (($res.FailedCount -gt 0) -or ($res.PassedCount -eq 0) -or ($null -eq $res)) {
            throw "$($res.FailedCount) tests failed."
        } else {
            Write-Host "All tests passed!" -ForegroundColor Green
        }
